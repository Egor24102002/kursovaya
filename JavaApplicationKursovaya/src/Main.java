
import java.io.IOException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.BodyPart;
import javax.mail.Flags;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Part;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMultipart;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import static jdk.nashorn.internal.codegen.OptimisticTypesPersistence.store;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author PENZA
 */
public class Main extends javax.swing.JFrame {
static Session session_current;
static Store current_store;
static Folder inbox, all, sent, trash,currentFolder;
static int remote=0;
static String current_username;
    /**
     * Creates new form Main
     */
    public Main(Session session,Store store,String username) {
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        send_button = new javax.swing.JButton();
        inbox_button = new javax.swing.JButton();
        sent_button = new javax.swing.JButton();
        trash_button = new javax.swing.JButton();
        all_button = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_messsages = new javax.swing.JTable();
        delete_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        send_button.setText("Send");
        send_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send_buttonActionPerformed(evt);
            }
        });

        inbox_button.setText("incoming messages");
        inbox_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inbox_buttonActionPerformed(evt);
            }
        });

        sent_button.setText(" sent messages");
        sent_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sent_buttonActionPerformed(evt);
            }
        });

        trash_button.setText("trash messages");
        trash_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trash_buttonActionPerformed(evt);
            }
        });

        all_button.setText("all messages");
        all_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                all_buttonActionPerformed(evt);
            }
        });

        table_messsages.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Message", "Subject", "Data"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_messsages.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_messsagesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_messsages);

        delete_button.setText("Delete");
        delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inbox_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sent_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(trash_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(all_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(send_button)
                        .addGap(45, 45, 45)
                        .addComponent(delete_button)
                        .addGap(60, 60, 60)))
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(send_button)
                    .addComponent(delete_button))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(inbox_button)
                        .addGap(29, 29, 29)
                        .addComponent(sent_button)
                        .addGap(27, 27, 27)
                        .addComponent(trash_button)
                        .addGap(31, 31, 31)
                        .addComponent(all_button)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void send_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send_buttonActionPerformed
        // TODO add your handling code here:

                NewMessage.main(session_current,current_username);
    }//GEN-LAST:event_send_buttonActionPerformed

    private void inbox_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inbox_buttonActionPerformed
   try {
       
               inbox = current_store.getFolder("INBOX");
             currentFolder=inbox;

   
            inbox.open(Folder.READ_WRITE);

            Message[] messages = inbox.getMessages();


         
            int count=inbox.getMessageCount();
            for (int i = 0; i < count; i++) {
                //System.out.println("Mail Subject:- " + messages[i].getSubject());
                 MyThread MyThread1 = new MyThread(messages[i]);
            MyThread1.start();
   
            }


        } catch (Exception e) {
            e.printStackTrace();
        }
            
                  // TODO add your handling code here:
    }//GEN-LAST:event_inbox_buttonActionPerformed

    private void sent_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sent_buttonActionPerformed
try{
          
                  sent = current_store.getFolder("[Gmail]/Отправленные");
                currentFolder=sent;
                            sent.open(Folder.READ_WRITE);
                            Message[] sentMails = sent.getMessages();
                    int count=sentMails.length;
        

            for (int i = 0; i <  count; i++) {
                //System.out.println("Mail Subject:- " + messages[i].getSubject());
                MyThread MyThread1 = new MyThread(sentMails[i]);
            MyThread1.start();
     
   
            }


        } catch (Exception e) {
            e.printStackTrace();
        }          

            
    }//GEN-LAST:event_sent_buttonActionPerformed

    private void trash_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trash_buttonActionPerformed
       try{
       
                   trash = current_store.getFolder("[Gmail]/Корзина");
              currentFolder=trash;
                            trash.open(Folder.READ_WRITE);
                            Message[] trashMails = trash.getMessages();
                         
           int count=trashMails.length;
            for (int i = 0; i <  count; i++) {
                //System.out.println("Mail Subject:- " + messages[i].getSubject());
                  MyThread MyThread1 = new MyThread(trashMails[i]);
            MyThread1.start();
     
                
     
   
            }


        } catch (Exception e) {
            e.printStackTrace();
        } 
    }//GEN-LAST:event_trash_buttonActionPerformed

    private void all_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_all_buttonActionPerformed
          try{
              
                   all = current_store.getFolder("[Gmail]/Вся почта");
                currentFolder=all;
                            all.open(Folder.READ_WRITE);
                            Message[] allmails = all.getMessages();

            int count=allmails.length;
            for (int i = 0; i <  count; i++) {
                //System.out.println("Mail Subject:- " + messages[i].getSubject());
              MyThread MyThread1 = new MyThread(allmails[i]);
            MyThread1.start();
     
     
   
            }


        } catch (Exception e) {
            e.printStackTrace();
        } 
    }//GEN-LAST:event_all_buttonActionPerformed

    private void delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_buttonActionPerformed
    
         
       try {
                    if (currentFolder != trash) {
                     
                   trash = current_store.getFolder("[Gmail]/Корзина");
             
                            trash.open(Folder.READ_WRITE);
                           DefaultTableModel model = (DefaultTableModel) table_messsages.getModel();
                         int SelectedRow = table_messsages.getSelectedRow();
                         System.out.print(SelectedRow);
                       Message selectedMessage = ((Message) table_messsages.getModel().getValueAt(SelectedRow, 0));
                        currentFolder.copyMessages(new Message[]{selectedMessage}, trash);
                        model.removeRow(SelectedRow);
                    }
                    else {
                        DefaultTableModel model = (DefaultTableModel) table_messsages.getModel();
                            int SelectedRow = table_messsages.getSelectedRow();
                        
                       Message selectedMessage = ((Message) table_messsages.getModel().getValueAt(SelectedRow, 0));
                          model.removeRow(SelectedRow);
                        selectedMessage.setFlag(Flags.Flag.DELETED, true);
                        currentFolder.expunge();
                        currentFolder.close(true);
                        currentFolder.open(Folder.READ_WRITE);
                          
                    }
//                    currentFolder.expunge();
//                    currentFolder.close(true);
//                    currentFolder.open(Folder.READ_WRITE);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Please select message.","Error",
                            JOptionPane.ERROR_MESSAGE);
                    
                }
    }//GEN-LAST:event_delete_buttonActionPerformed

    private void table_messsagesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_messsagesMouseClicked
  if (evt.getClickCount() == 2) {
                    try {
                          DefaultTableModel model = (DefaultTableModel) table_messsages.getModel();
                         int SelectedRow = table_messsages.getSelectedRow();
                       
                       Message selectedMessage = ((Message) table_messsages.getModel().getValueAt(SelectedRow, 0));
                        selectedMessage = ((Message) table_messsages.getModel().getValueAt(SelectedRow, 0));
               
                        String[] args = {((InternetAddress)(((Message) table_messsages.getModel().getValueAt(SelectedRow, 0)).getFrom())[0]).getAddress(),
                                "" + table_messsages.getModel().getValueAt(SelectedRow, 1),
                                "" + getText((Message) table_messsages.getModel().getValueAt(SelectedRow, 0))};
                        ShowMessage.main(args[0], args[1], args[2], (Message) table_messsages.getModel().getValueAt(SelectedRow, 0));
                        //sm.setMessage((Message) table1.getModel().getValueAt(row, 0));
                        //sm.show(args, (Message) table1.getModel().getValueAt(row, 0));
                        //sm.main(args);
                        //ShowMessage.main(args);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }    
    }//GEN-LAST:event_table_messsagesMouseClicked
    private String getText(Part p) throws
            MessagingException, IOException {
        if (p.isMimeType("text/*")) {
            String s = (String)p.getContent();
            textIsHtml = p.isMimeType("text/html");
            return s;
        }

        if (p.isMimeType("multipart/alternative")) {
            // prefer html text over plain text
            Multipart mp = (Multipart)p.getContent();
            String text = null;
            for (int i = 0; i < mp.getCount(); i++) {
                Part bp = mp.getBodyPart(i);
                if (bp.isMimeType("text/plain")) {
                    if (text == null)
                        text = getText(bp);
                    continue;
                } else if (bp.isMimeType("text/html")) {
                    String s = getText(bp);
                    if (s != null)
                        return s;
                } else {
                    return getText(bp);
                }
            }
            return text;
        } else if (p.isMimeType("multipart/*")) {
            Multipart mp = (Multipart)p.getContent();
            for (int i = 0; i < mp.getCount(); i++) {
                String s = getText(mp.getBodyPart(i));
                if (s != null)
                    return s;
            }
        }

        return null;
    }
    
       private boolean textIsHtml = false;
    /**
     * @param args the command line arguments
     */
    public static void main(Session session,Store store,String username) {
      java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               session_current=session;
              current_store=store;
               current_username=username;
                new Main(session_current,current_store,current_username).setVisible(true);
            }
        });
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
  
          
        /* Create and display the form */
     
    }

     class MyThread extends Thread {

        private int INDEX,COUNT;
        private Message messages;
        MyThread(Message message) {
  
            messages=message;

        }

        public void run() {
            try{
               DefaultTableModel model = (DefaultTableModel) table_messsages.getModel();
            model.setRowCount(0);

              Object[] row = { messages, messages.getSubject(), messages.getSentDate()};
                  model.addRow(row);
                  if (remote==0)
                  {
        table_messsages.removeColumn(table_messsages.getColumnModel().getColumn(0));
        remote=1;
                  }
                  
            }
            catch (Exception e) {
                        e.printStackTrace();
                    }
        }}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton all_button;
    private javax.swing.JButton delete_button;
    private javax.swing.JButton inbox_button;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton send_button;
    private javax.swing.JButton sent_button;
    private javax.swing.JTable table_messsages;
    private javax.swing.JButton trash_button;
    // End of variables declaration//GEN-END:variables
}
